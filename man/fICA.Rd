% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ica_funs.R
\name{fICA}
\alias{fICA}
\alias{adapt_fast_ICA}
\alias{fast_ICA2}
\title{Wrapper for FastICA methods for Independent Component Analysis from fICA package}
\usage{
adapt_fast_ICA(
  X,
  gs = fICA::gf,
  dgs = fICA::dgf,
  kj = 0,
  eps = 1e-06,
  maxiter = 1000
)

fast_ICA2(
  X,
  g = "tanh",
  dg = NULL,
  G = NULL,
  init = NULL,
  n.init = 1,
  method = "def",
  eps = 1e-06,
  maxiter = 1000
)
}
\arguments{
\item{X}{A matrix of data frame.}

\item{gs}{a list of functions containing the nonlinearities.}

\item{dgs}{a list of functions containing the first derivatives of the nonlinearities.}

\item{kj}{defines the initial estimate of the unmixing matrix, see details.}

\item{eps}{convergence tolerance.}

\item{maxiter}{maximum number of iterations.}

\item{g}{the nonlinearity, tanh by default, see details.}

\item{dg}{the first derivative of the nonlinearity, see details.}

\item{G}{the integral function of the nonlinearity, see details.}

\item{init}{a numeric matrix for the initial value of the algorithm}

\item{n.init}{a positive integer for the number of initial values in symmetric algorithms, see details.}

\item{method}{squared symmetric (\code{"sym2"}), symmetric (\code{"sym"}) or deflation-based (\code{"def"})}
}
\value{
A list with the unmixing matrix W and the mixing matrix A.
}
\description{
\code{adapt_fast_ICA()} and \code{fast_ICA2()} are wrappers for \link[fICA:adapt_fICA]{fICA::adapt_fICA} and \link[fICA:fICA]{fICA::fICA} that only run in C, and return a transposed
version
of the original estimated unmixing matrix in W, and the mixing matrix A,
consistent with the formulation \code{X= S \%*\% A}, where X is the matrix of data with
N_samples by N_channels, and S is a matrix of sources with N_samples by N_sources.
They are meant to be  used with \code{\link[=eeg_ica]{eeg_ica()}}. In order to save memory, these wrappers do not
return the estimated
source components.
}
\seealso{
Other ica methods: 
\code{\link{fast_ICA}()}
}
\concept{ica methods}
